{"version":3,"sources":["webpack:///./src/components/TagCard/tags.module.less","webpack:///./src/components/TagCard/index.jsx","webpack:///./src/pages/projects/index.jsx"],"names":["module","exports","TagCard","props","img","name","description","color","tagPage","Config","pages","tag","React","createElement","Link","className","style","tagCard","to","Utils","resolvePageUrl","tagImg","backgroundImage","pd20px","Projects","_ref","data","allFile","edges","rawTags","allMarkdownRemark","map","edge","node","frontmatter","tags","reduce","prev","curr","concat","filter","index","indexOf","sort","tagData","_Layout","Header","SEO","title","path","SidebarWrapper","Fragment","_Row","gutter","val","_Col","key","xs","sm","md","lg","childImageSharp","fluid","src"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,QAAU,8BAA8B,OAAS,6BAA6B,OAAS,+B,uPCmC1FC,MA9BEC,IACf,MAAM,IACJC,EAAG,KAAEC,EAAI,YAAEC,EAAW,MAAEC,GACtBJ,EACEK,EAAUC,IAAOC,MAAMC,IAC7B,OACEC,IAAAC,cAACC,OAAI,CAACC,UAAWC,IAAMC,QAASC,GAAIC,IAAMC,eAAeZ,EAASH,IAChEO,IAAAC,cAAA,OAAKE,UAAWC,IAAMC,SACpBL,IAAAC,cAAA,OACEE,UAAWC,IAAMK,OACjBL,MAAO,CACLM,gBAAgB,OAAQlB,EAAG,OAG/BQ,IAAAC,cAAA,OAAKE,UAAWC,IAAMO,QACpBX,IAAAC,cAAA,OAAKE,UAAU,cACbH,IAAAC,cAAA,MAAIG,MAAO,CAAET,MAAM,GAAIA,IAAW,IAE/BF,IAGLO,IAAAC,cAAA,SACGP,OCoFEkB,UAnGEC,IAAe,IAAd,KAAEC,GAAMD,EACxB,MAAQE,SAAS,MAAEC,IAAYF,EACzBG,EAAUH,EAAKI,kBAAkBF,MACpCG,IAAKC,GAASA,EAAKC,KAAKC,YAAYC,MACpCC,OAAO,CAACC,EAAMC,IAASD,EAAKE,OAAOD,IACtCT,EACGW,OAAO,CAAC7B,EAAK8B,IAAUA,IAAUZ,EAAQa,QAAQ/B,IACjDgC,OAEH,MAAMC,EAAUnC,IAAO0B,KACvB,OACEvB,IAAAC,cAAAgC,IAAA,CAAQ9B,UAAU,gBAChBH,IAAAC,cAAAgC,IAAA,CAAQ9B,UAAU,aAChBH,IAAAC,cAACiC,IAAM,MACPlC,IAAAC,cAACkC,IAAG,CACFC,MAAM,WACN1C,YAAY,4CACZ2C,KAAK,aAEPrC,IAAAC,cAACqC,IAAc,KACbtC,IAAAC,cAAAD,IAAAuC,SAAA,KACEvC,IAAAC,cAAA,OAAKE,UAAU,kBACbH,IAAAC,cAAA,MAAIE,UAAU,iBAAgB,aAEhCH,IAAAC,cAAAuC,IAAA,CAAKC,OAAQ,CAAC,GAAI,KAEdzB,EAAMG,IAAKuB,GACT1C,IAAAC,cAAA0C,IAAA,CAAKC,IAAKF,EAAIrB,KAAK5B,KAAMoD,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACnDhD,IAAAC,cAACX,EAAO,CACNE,IAAKkD,EAAIrB,KAAK4B,gBAAgBC,MAAMC,IACpC1D,KAAMiD,EAAIrB,KAAK5B,KACfC,YAAasC,EAAQU,EAAIrB,KAAK5B,MAAMC,YACpCC,MAAOqC,EAAQU,EAAIrB,KAAK5B,MAAME","file":"component---src-pages-projects-index-jsx-72f5e9ab3d2300bb4841.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagCard\":\"tags-module--tagCard--2sNqZ\",\"tagImg\":\"tags-module--tagImg--21WVr\",\"pd20px\":\"tags-module--pd20px--1m4en\"};","import React from 'react';\nimport { Link } from 'gatsby';\nimport Config from '../../../config';\nimport Utils from '../../utils/pageUtils';\nimport style from './tags.module.less';\n\nconst TagCard = (props) => {\n  const {\n    img, name, description, color,\n  } = props;\n  const tagPage = Config.pages.tag;\n  return (\n    <Link className={style.tagCard} to={Utils.resolvePageUrl(tagPage, name)}>\n      <div className={style.tagCard}>\n        <div\n          className={style.tagImg}\n          style={{\n            backgroundImage: `url(${img})`,\n          }}\n        />\n        <div className={style.pd20px}>\n          <div className=\"textCenter\">\n            <h4 style={{ color: `${color}` }}>\n              #\n              {name}\n            </h4>\n          </div>\n          <p>\n            {description}\n          </p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default TagCard;\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport {\n  Layout, Row, Col,\n} from 'antd';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Header from '../../components/PageLayout/Header';\nimport SEO from '../../components/Seo';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\nimport TagCard from '../../components/TagCard';\nimport Config from '../../../config';\n\nconst Projects = ({ data }) => {\n  const { allFile: { edges } } = data;\n  const rawTags = data.allMarkdownRemark.edges\n    .map((edge) => edge.node.frontmatter.tags)\n    .reduce((prev, curr) => prev.concat(curr));\n  rawTags\n    .filter((tag, index) => index === rawTags.indexOf(tag))\n    .sort(); // Remove duplicates and sort values\n  // const tagPage = Config.pages.tag;\n  const tagData = Config.tags;\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title=\"Projects\"\n          description=\"This page consists projects made by Rahul\"\n          path=\"projects\"\n        />\n        <SidebarWrapper>\n          <>\n            <div className=\"marginTopTitle\">\n              <h1 className=\"titleSeparate\">Projects</h1>\n            </div>\n            <Row gutter={[30, 20]}>\n              {\n                edges.map((val) => (\n                  <Col key={val.node.name} xs={24} sm={24} md={12} lg={8}>\n                    <TagCard\n                      img={val.node.childImageSharp.fluid.src}\n                      name={val.node.name}\n                      description={tagData[val.node.name].description}\n                      color={tagData[val.node.name].color}\n                    />\n                  </Col>\n                ))\n              }\n            </Row>\n          </>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nProjects.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              tags: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired,\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/index.md$/\" } }) {\n      edges {\n        node {\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Projects;\n"],"sourceRoot":""}