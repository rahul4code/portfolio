{"version":3,"sources":["webpack:///./src/components/TagCard/tags.module.less","webpack:///./src/components/TagCard/index.jsx","webpack:///./src/pages/projects/index.jsx"],"names":["module","exports","TagCard","props","img","name","description","color","tagPage","Config","pages","tag","React","createElement","Link","className","style","tagCard","to","Utils","resolvePageUrl","tagImg","backgroundImage","pd20px","Projects","_ref","data","allFile","edges","rawTags","allMarkdownRemark","map","edge","node","frontmatter","tags","reduce","prev","curr","concat","filter","index","indexOf","sort","tagData","_Layout","Header","SEO","title","path","SidebarWrapper","Fragment","_Row","gutter","val","_Col","key","xs","sm","md","lg","childImageSharp","fluid","src"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,QAAU,8BAA8B,OAAS,6BAA6B,OAAS,+B,uPCmC1FC,MA9BEC,IACf,MAAM,IACJC,EAAG,KAAEC,EAAI,YAAEC,EAAW,MAAEC,GACtBJ,EACEK,EAAUC,IAAOC,MAAMC,IAC7B,OACEC,IAAAC,cAACC,OAAI,CAACC,UAAWC,IAAMC,QAASC,GAAIC,IAAMC,eAAeZ,EAASH,IAChEO,IAAAC,cAAA,OAAKE,UAAWC,IAAMC,SACpBL,IAAAC,cAAA,OACEE,UAAWC,IAAMK,OACjBL,MAAO,CACLM,gBAAgB,OAAQlB,EAAG,OAG/BQ,IAAAC,cAAA,OAAKE,UAAWC,IAAMO,QACpBX,IAAAC,cAAA,OAAKE,UAAU,cACbH,IAAAC,cAAA,MAAIG,MAAO,CAAET,MAAM,GAAIA,IAAW,IAE/BF,IAGLO,IAAAC,cAAA,SACGP,OCoFEkB,UAnGEC,IAAe,IAAd,KAAEC,GAAMD,EACxB,MAAQE,SAAS,MAAEC,IAAYF,EACzBG,EAAUH,EAAKI,kBAAkBF,MACpCG,IAAKC,GAASA,EAAKC,KAAKC,YAAYC,MACpCC,OAAO,CAACC,EAAMC,IAASD,EAAKE,OAAOD,IACtCT,EACGW,OAAO,CAAC7B,EAAK8B,IAAUA,IAAUZ,EAAQa,QAAQ/B,IACjDgC,OAEH,MAAMC,EAAUnC,IAAO0B,KACvB,OACEvB,IAAAC,cAAAgC,IAAA,CAAQ9B,UAAU,gBAChBH,IAAAC,cAAAgC,IAAA,CAAQ9B,UAAU,aAChBH,IAAAC,cAACiC,IAAM,MACPlC,IAAAC,cAACkC,IAAG,CACFC,MAAM,WACN1C,YAAY,4CACZ2C,KAAK,aAEPrC,IAAAC,cAACqC,IAAc,KACbtC,IAAAC,cAAAD,IAAAuC,SAAA,KACEvC,IAAAC,cAAA,OAAKE,UAAU,kBACbH,IAAAC,cAAA,MAAIE,UAAU,iBAAgB,aAEhCH,IAAAC,cAAAuC,IAAA,CAAKC,OAAQ,CAAC,GAAI,KAEdzB,EAAMG,IAAKuB,GACT1C,IAAAC,cAAA0C,IAAA,CAAKC,IAAKF,EAAIrB,KAAK5B,KAAMoD,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACnDhD,IAAAC,cAACX,EAAO,CACNE,IAAKkD,EAAIrB,KAAK4B,gBAAgBC,MAAMC,IACpC1D,KAAMiD,EAAIrB,KAAK5B,KACfC,YAAasC,EAAQU,EAAIrB,KAAK5B,MAAMC,YACpCC,MAAOqC,EAAQU,EAAIrB,KAAK5B,MAAME","file":"component---src-pages-projects-index-jsx-036486f5207a1d24f434.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagCard\":\"tags-module--tagCard--1Jag2\",\"tagImg\":\"tags-module--tagImg--34Nzk\",\"pd20px\":\"tags-module--pd20px--1VPGO\"};","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport Config from '../../../config';\r\nimport Utils from '../../utils/pageUtils';\r\nimport style from './tags.module.less';\r\n\r\nconst TagCard = (props) => {\r\n  const {\r\n    img, name, description, color,\r\n  } = props;\r\n  const tagPage = Config.pages.tag;\r\n  return (\r\n    <Link className={style.tagCard} to={Utils.resolvePageUrl(tagPage, name)}>\r\n      <div className={style.tagCard}>\r\n        <div\r\n          className={style.tagImg}\r\n          style={{\r\n            backgroundImage: `url(${img})`,\r\n          }}\r\n        />\r\n        <div className={style.pd20px}>\r\n          <div className=\"textCenter\">\r\n            <h4 style={{ color: `${color}` }}>\r\n              #\r\n              {name}\r\n            </h4>\r\n          </div>\r\n          <p>\r\n            {description}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default TagCard;\r\n","/* eslint-disable react/forbid-prop-types */\r\nimport React from 'react';\r\nimport {\r\n  Layout, Row, Col,\r\n} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { graphql } from 'gatsby';\r\nimport Header from '../../components/PageLayout/Header';\r\nimport SEO from '../../components/Seo';\r\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\r\nimport TagCard from '../../components/TagCard';\r\nimport Config from '../../../config';\r\n\r\nconst Projects = ({ data }) => {\r\n  const { allFile: { edges } } = data;\r\n  const rawTags = data.allMarkdownRemark.edges\r\n    .map((edge) => edge.node.frontmatter.tags)\r\n    .reduce((prev, curr) => prev.concat(curr));\r\n  rawTags\r\n    .filter((tag, index) => index === rawTags.indexOf(tag))\r\n    .sort(); // Remove duplicates and sort values\r\n  // const tagPage = Config.pages.tag;\r\n  const tagData = Config.tags;\r\n  return (\r\n    <Layout className=\"outerPadding\">\r\n      <Layout className=\"container\">\r\n        <Header />\r\n        <SEO\r\n          title=\"Projects\"\r\n          description=\"This page consists projects made by Rahul\"\r\n          path=\"projects\"\r\n        />\r\n        <SidebarWrapper>\r\n          <>\r\n            <div className=\"marginTopTitle\">\r\n              <h1 className=\"titleSeparate\">Projects</h1>\r\n            </div>\r\n            <Row gutter={[30, 20]}>\r\n              {\r\n                edges.map((val) => (\r\n                  <Col key={val.node.name} xs={24} sm={24} md={12} lg={8}>\r\n                    <TagCard\r\n                      img={val.node.childImageSharp.fluid.src}\r\n                      name={val.node.name}\r\n                      description={tagData[val.node.name].description}\r\n                      color={tagData[val.node.name].color}\r\n                    />\r\n                  </Col>\r\n                ))\r\n              }\r\n            </Row>\r\n          </>\r\n        </SidebarWrapper>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nProjects.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              tags: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        }).isRequired,\r\n      ).isRequired,\r\n    }).isRequired,\r\n    allFile: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            childImageSharp: PropTypes.shape({\r\n              fluid: PropTypes.object.isRequired,\r\n            }).isRequired,\r\n          }).isRequired,\r\n        }).isRequired,\r\n      ).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport const query = graphql`\r\n  {\r\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/index.md$/\" } }) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\r\n      edges {\r\n        node {\r\n          name\r\n          childImageSharp {\r\n            fluid(maxWidth: 400) {\r\n              ...GatsbyImageSharpFluid_tracedSVG\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Projects;\r\n"],"sourceRoot":""}